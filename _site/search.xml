<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[DataFrame_Demo]]></title>
      <url>/language/2018/12/22/dataframe/</url>
      <content type="text"><![CDATA[增進工程師效率 Python DataFrame: CSV &amp; PlotPython DataFrameCreate DataFrame      Direct input        Use dict: Method 1: 一筆一筆加入。  import pandas as pddict1 = {'Name': 'Allen' , 'Sex': 'male', 'Age': 33}dict2 = {'Name': 'Alice' , 'Sex': 'female', 'Age': 22}dict3 = {'Name': 'Bob' , 'Sex': 'male', 'Age': 11}data = [dict1, dict2, dict3]df = pd.DataFrame(data)df                  Name      Sex      Age                  0      Allen      male      33              1      Alice      female      22              2      Bob      male      11      Method 2: 一次加入所有資料。name = ['Allen', 'Alice', 'Bob']sex = ['male', 'female', 'male']age = [33, 22, 11]all_dict = {    "Name": name,    "Sex": sex,    "Age": age}df = pd.DataFrame(all_dict)df[['Name', 'Age']]                  Name      Age                  0      Allen      33              1      Alice      22              2      Bob      11      Dataframe 的屬性  ndim: 2 for 2D dataframe; axis 0 =&gt; row; axis 1 =&gt; column  shape:  (row no. x column no.) (not including number index)  dtypes: (object or int) of each columndf.ndim2df.shape(3, 3)df.dtypesName    objectSex     objectAge      int64dtype: objectdf.columnsIndex(['Name', 'Sex', 'Age'], dtype='object')df.indexRangeIndex(start=0, stop=3, step=1)Read CSVDonwload a test csv file from https://people.sc.fsu.edu/~jburkardt/data/csv/csv.html  Pick the biostats.csvFor 2, Before read csv, reference Medium article to import google drive  Read csv 使用 read_csv function.  但是要加上 skipinitialspace to strip the leading space!!  Two ways to read_csv: (1) load csv file directly; (2) load from urlimport pandas as pdfrom google.colab import drivedrive.mount('/content/drive')#!ls 'drive/My Drive/Colab Notebooks/'df = pd.read_csv('drive/My Drive/Colab Notebooks/biostats.csv', skipinitialspace=True)dfGo to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&amp;redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&amp;response_type=code&amp;scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonlyEnter your authorization code:··········Mounted at /content/drive                  Name      Sex      Age      Height (in)      Weight (lbs)                  0      Alex      M      41      74      170              1      Bert      M      42      68      166              2      Carl      M      32      70      155              3      Dave      M      39      72      167              4      Elly      F      30      66      124              5      Fran      F      33      66      115              6      Gwen      F      26      64      121              7      Hank      M      30      71      158              8      Ivan      M      53      72      175              9      Jake      M      32      69      143              10      Kate      F      47      69      139              11      Luke      M      34      72      163              12      Myra      F      23      62      98              13      Neil      M      36      75      160              14      Omar      M      38      70      145              15      Page      F      31      67      135              16      Quin      M      29      71      176              17      Ruth      F      28      65      131      url = "https://people.sc.fsu.edu/~jburkardt/data/csv/biostats.csv"df = pd.read_csv(url, skipinitialspace=True)df                  Name      Sex      Age      Height (in)      Weight (lbs)                  0      Alex      M      41      74      170              1      Bert      M      42      68      166              2      Carl      M      32      70      155              3      Dave      M      39      72      167              4      Elly      F      30      66      124              5      Fran      F      33      66      115              6      Gwen      F      26      64      121              7      Hank      M      30      71      158              8      Ivan      M      53      72      175              9      Jake      M      32      69      143              10      Kate      F      47      69      139              11      Luke      M      34      72      163              12      Myra      F      23      62      98              13      Neil      M      36      75      160              14      Omar      M      38      70      145              15      Page      F      31      67      135              16      Quin      M      29      71      176              17      Ruth      F      28      65      131      print(df.columns); print(df.index)Index(['Name', 'Sex', 'Age', 'Height (in)', 'Weight (lbs)'], dtype='object')RangeIndex(start=0, stop=18, step=1)df.ndim2df.shape(18, 5)df.dtypesName            objectSex             objectAge              int64Height (in)      int64Weight (lbs)     int64dtype: objectBasic Viewing Commanddf.head(3)                  Name      Sex      Age      Height (in)      Weight (lbs)                  0      Alex      M      41      74      170              1      Bert      M      42      68      166              2      Carl      M      32      70      155      df.tail(3)                  Name      Sex      Age      Height (in)      Weight (lbs)                  15      Page      F      31      67      135              16      Quin      M      29      71      176              17      Ruth      F      28      65      131      df.shape(18, 5)df.info()&lt;class 'pandas.core.frame.DataFrame'&gt;RangeIndex: 18 entries, 0 to 17Data columns (total 5 columns):Name            18 non-null objectSex             18 non-null objectAge             18 non-null int64Height (in)     18 non-null int64Weight (lbs)    18 non-null int64dtypes: int64(3), object(2)memory usage: 848.0+ bytesdf[7:10]                  Name      Sex      Age      Height (in)      Weight (lbs)                  7      Hank      M      30      71      158              8      Ivan      M      53      72      175              9      Jake      M      32      69      143      df['Name'][7:10]7    Hank8    Ivan9    JakeName: Name, dtype: objectdf[['Name', 'Age', 'Sex']][7:10]                  Name      Age      Sex                  7      Hank      30      M              8      Ivan      53      M              9      Jake      32      M      df.loc[7:10, ['Name', 'Age', 'Sex']] # compare with loc call                  Name      Age      Sex                  7      Hank      30      M              8      Ivan      53      M              9      Jake      32      M              10      Kate      47      F      df.count()Name            18Sex             18Age             18Height (in)     18Weight (lbs)    18dtype: int64Basic Index OperationIndex (索引) is a very useful key for DataFrame.  The default index is the row number starting from 0 to N-1, where N is the number of data.除了用 row number 做為 index, 一般也會使用 unique feature 例如 name, id, or phone number 做為 index.把 column 變成 index  Method 1: 直接在 read_csv 指定 index_col.  可以看到 index number 消失，而被 Name column 取代。df = pd.read_csv('drive/My Drive/Colab Notebooks/biostats.csv', skipinitialspace=True, index_col='Name')df                  Sex      Age      Height (in)      Weight (lbs)              Name                                          Alex      M      41      74      170              Bert      M      42      68      166              Carl      M      32      70      155              Dave      M      39      72      167              Elly      F      30      66      124              Fran      F      33      66      115              Gwen      F      26      64      121              Hank      M      30      71      158              Ivan      M      53      72      175              Jake      M      32      69      143              Kate      F      47      69      139              Luke      M      34      72      163              Myra      F      23      62      98              Neil      M      36      75      160              Omar      M      38      70      145              Page      F      31      67      135              Quin      M      29      71      176              Ruth      F      28      65      131        df.index shows the element in index columndf.indexIndex(['Alex', 'Bert', 'Carl', 'Dave', 'Elly', 'Fran', 'Gwen', 'Hank', 'Ivan',       'Jake', 'Kate', 'Luke', 'Myra', 'Neil', 'Omar', 'Page', 'Quin', 'Ruth'],      dtype='object', name='Name')  使用 reset_index 又會回到 index number.df.reset_index()                  Name      Sex      Age      Height (in)      Weight (lbs)                  0      Alex      M      41      74      170              1      Bert      M      42      68      166              2      Carl      M      32      70      155              3      Dave      M      39      72      167              4      Elly      F      30      66      124              5      Fran      F      33      66      115              6      Gwen      F      26      64      121              7      Hank      M      30      71      158              8      Ivan      M      53      72      175              9      Jake      M      32      69      143              10      Kate      F      47      69      139              11      Luke      M      34      72      163              12      Myra      F      23      62      98              13      Neil      M      36      75      160              14      Omar      M      38      70      145              15      Page      F      31      67      135              16      Quin      M      29      71      176              17      Ruth      F      28      65      131      再看一次 df 並沒有改變。很多 DataFrame 的 function 都是保留原始的 df, create a new object, 也就是 inplace = False.   如果要取代原來的 df, 必須 inplace = True!df                  Sex      Age      Height (in)      Weight (lbs)              Name                                          Alex      M      41      74      170              Bert      M      42      68      166              Carl      M      32      70      155              Dave      M      39      72      167              Elly      F      30      66      124              Fran      F      33      66      115              Gwen      F      26      64      121              Hank      M      30      71      158              Ivan      M      53      72      175              Jake      M      32      69      143              Kate      F      47      69      139              Luke      M      34      72      163              Myra      F      23      62      98              Neil      M      36      75      160              Omar      M      38      70      145              Page      F      31      67      135              Quin      M      29      71      176              Ruth      F      28      65      131      df.reset_index(inplace=True)df                  Name      Sex      Age      Height (in)      Weight (lbs)                  0      Alex      M      41      74      170              1      Bert      M      42      68      166              2      Carl      M      32      70      155              3      Dave      M      39      72      167              4      Elly      F      30      66      124              5      Fran      F      33      66      115              6      Gwen      F      26      64      121              7      Hank      M      30      71      158              8      Ivan      M      53      72      175              9      Jake      M      32      69      143              10      Kate      F      47      69      139              11      Luke      M      34      72      163              12      Myra      F      23      62      98              13      Neil      M      36      75      160              14      Omar      M      38      70      145              15      Page      F      31      67      135              16      Quin      M      29      71      176              17      Ruth      F      28      65      131      如果再 reset_index(）一次，會是什麼結果？此處用 default inplace=False.多了一個 index columndf.reset_index()                  index      Name      Sex      Age      Height (in)      Weight (lbs)                  0      0      Alex      M      41      74      170              1      1      Bert      M      42      68      166              2      2      Carl      M      32      70      155              3      3      Dave      M      39      72      167              4      4      Elly      F      30      66      124              5      5      Fran      F      33      66      115              6      6      Gwen      F      26      64      121              7      7      Hank      M      30      71      158              8      8      Ivan      M      53      72      175              9      9      Jake      M      32      69      143              10      10      Kate      F      47      69      139              11      11      Luke      M      34      72      163              12      12      Myra      F      23      62      98              13      13      Neil      M      36      75      160              14      14      Omar      M      38      70      145              15      15      Page      F      31      67      135              16      16      Quin      M      29      71      176              17      17      Ruth      F      28      65      131      df                  Name      Sex      Age      Height (in)      Weight (lbs)                  0      Alex      M      41      74      170              1      Bert      M      42      68      166              2      Carl      M      32      70      155              3      Dave      M      39      72      167              4      Elly      F      30      66      124              5      Fran      F      33      66      115              6      Gwen      F      26      64      121              7      Hank      M      30      71      158              8      Ivan      M      53      72      175              9      Jake      M      32      69      143              10      Kate      F      47      69      139              11      Luke      M      34      72      163              12      Myra      F      23      62      98              13      Neil      M      36      75      160              14      Omar      M      38      70      145              15      Page      F      31      67      135              16      Quin      M      29      71      176              17      Ruth      F      28      65      131        Method 2: 使用 set_index()df.set_index('Name', inplace=True)df                  Sex      Age      Height (in)      Weight (lbs)              Name                                          Alex      M      41      74      170              Bert      M      42      68      166              Carl      M      32      70      155              Dave      M      39      72      167              Elly      F      30      66      124              Fran      F      33      66      115              Gwen      F      26      64      121              Hank      M      30      71      158              Ivan      M      53      72      175              Jake      M      32      69      143              Kate      F      47      69      139              Luke      M      34      72      163              Myra      F      23      62      98              Neil      M      36      75      160              Omar      M      38      70      145              Page      F      31      67      135              Quin      M      29      71      176              Ruth      F      28      65      131      loc[]使用 loc[] 配合 index label 取出資料非常方便。\如果是 number index, 可以用 df[0], df[3], etc.\但如果是其他 column index, e.g. Name, df[2] 或是 df[“Hank”] are wrong!, 必須用 df.loc[‘Hank’]\或是 df.loc[ [‘Hank’, ‘Ruth’, ‘Page’] ]df.loc['Hank']Sex               MAge              30Height (in)      71Weight (lbs)    158Name: Hank, dtype: objectdf.loc[:, ['Sex', 'Age']]                  Sex      Age              Name                              Alex      M      41              Bert      M      42              Carl      M      32              Dave      M      39              Elly      F      30              Fran      F      33              Gwen      F      26              Hank      M      30              Ivan      M      53              Jake      M      32              Kate      F      47              Luke      M      34              Myra      F      23              Neil      M      36              Omar      M      38              Page      F      31              Quin      M      29              Ruth      F      28      df.loc[ ['Hank', 'Ruth', 'Page'] ]                  Sex      Age      Height (in)      Weight (lbs)              Name                                          Hank      M      30      71      158              Ruth      F      28      65      131              Page      F      31      67      135      loc[] 可以用 row, column 得到對應的 element, 似乎是奇怪的用法df.loc['Hank', 'Age']30iloc[]使用 column index 仍然可以用 iloc[] 配合 index number 取出資料。df.iloc[0]Sex               MAge              41Height (in)      74Weight (lbs)    170Name: Alex, dtype: objectdf.iloc[1:10]                  Sex      Age      Height (in)      Weight (lbs)              Name                                          Bert      M      42      68      166              Carl      M      32      70      155              Dave      M      39      72      167              Elly      F      30      66      124              Fran      F      33      66      115              Gwen      F      26      64      121              Hank      M      30      71      158              Ivan      M      53      72      175              Jake      M      32      69      143      df.iloc[[1, 4, 6]]                  Sex      Age      Height (in)      Weight (lbs)              Name                                          Bert      M      42      68      166              Elly      F      30      66      124              Gwen      F      26      64      121      排序包含兩種排序  sort_index()  sort_value()df.sort_index()                  Sex      Age      Height (in)      Weight (lbs)              Name                                          Alex      M      41      74      170              Bert      M      42      68      166              Carl      M      32      70      155              Dave      M      39      72      167              Elly      F      30      66      124              Fran      F      33      66      115              Gwen      F      26      64      121              Hank      M      30      71      158              Ivan      M      53      72      175              Jake      M      32      69      143              Kate      F      47      69      139              Luke      M      34      72      163              Myra      F      23      62      98              Neil      M      36      75      160              Omar      M      38      70      145              Page      F      31      67      135              Quin      M      29      71      176              Ruth      F      28      65      131      df.sort_values(by = 'Age')                  Sex      Age      Height (in)      Weight (lbs)              Name                                          Myra      F      23      62      98              Gwen      F      26      64      121              Ruth      F      28      65      131              Quin      M      29      71      176              Elly      F      30      66      124              Hank      M      30      71      158              Page      F      31      67      135              Carl      M      32      70      155              Jake      M      32      69      143              Fran      F      33      66      115              Luke      M      34      72      163              Neil      M      36      75      160              Omar      M      38      70      145              Dave      M      39      72      167              Alex      M      41      74      170              Bert      M      42      68      166              Kate      F      47      69      139              Ivan      M      53      72      175      Rename and Drop Column(s) and Index(s)df.rename(columns={"Height (in)": "Height", "Weight (lbs)": "Weight"}, inplace=True)df                  Sex      Age      Height      Weight              Name                                          Alex      M      41      74      170              Bert      M      42      68      166              Carl      M      32      70      155              Dave      M      39      72      167              Elly      F      30      66      124              Fran      F      33      66      115              Gwen      F      26      64      121              Hank      M      30      71      158              Ivan      M      53      72      175              Jake      M      32      69      143              Kate      F      47      69      139              Luke      M      34      72      163              Myra      F      23      62      98              Neil      M      36      75      160              Omar      M      38      70      145              Page      F      31      67      135              Quin      M      29      71      176              Ruth      F      28      65      131      df.rename(index={"Alex": "Allen", "Bert": "Bob"}, inplace=True)df                  Sex      Age      Height      Weight              Name                                          Allen      M      41      74      170              Bob      M      42      68      166              Carl      M      32      70      155              Dave      M      39      72      167              Elly      F      30      66      124              Fran      F      33      66      115              Gwen      F      26      64      121              Hank      M      30      71      158              Ivan      M      53      72      175              Jake      M      32      69      143              Kate      F      47      69      139              Luke      M      34      72      163              Myra      F      23      62      98              Neil      M      36      75      160              Omar      M      38      70      145              Page      F      31      67      135              Quin      M      29      71      176              Ruth      F      28      65      131      df.drop(labels=['Sex', 'Weight'], axis="columns") # axis=1 eq axis="columns"                  Age      Height              Name                              Allen      41      74              Bob      42      68              Carl      32      70              Dave      39      72              Elly      30      66              Fran      33      66              Gwen      26      64              Hank      30      71              Ivan      53      72              Jake      32      69              Kate      47      69              Luke      34      72              Myra      23      62              Neil      36      75              Omar      38      70              Page      31      67              Quin      29      71              Ruth      28      65      df.drop(labels=['Allen', 'Ruth'], axis="index") # axis=0 eq axis="index"                  Sex      Age      Height      Weight              Name                                          Bob      M      42      68      166              Carl      M      32      70      155              Dave      M      39      72      167              Elly      F      30      66      124              Fran      F      33      66      115              Gwen      F      26      64      121              Hank      M      30      71      158              Ivan      M      53      72      175              Jake      M      32      69      143              Kate      F      47      69      139              Luke      M      34      72      163              Myra      F      23      62      98              Neil      M      36      75      160              Omar      M      38      70      145              Page      F      31      67      135              Quin      M      29      71      176      進階技巧Multiple Index (多重索引)這是非常有用的技巧，使用 set_index with keysdf = pd.read_csv('drive/My Drive/Colab Notebooks/biostats.csv', skipinitialspace=True)df  # show the original dataframe                  Name      Sex      Age      Height (in)      Weight (lbs)                  0      Alex      M      41      74      170              1      Bert      M      42      68      166              2      Carl      M      32      70      155              3      Dave      M      39      72      167              4      Elly      F      30      66      124              5      Fran      F      33      66      115              6      Gwen      F      26      64      121              7      Hank      M      30      71      158              8      Ivan      M      53      72      175              9      Jake      M      32      69      143              10      Kate      F      47      69      139              11      Luke      M      34      72      163              12      Myra      F      23      62      98              13      Neil      M      36      75      160              14      Omar      M      38      70      145              15      Page      F      31      67      135              16      Quin      M      29      71      176              17      Ruth      F      28      65      131      df.set_index(keys = ['Name', 'Sex'])  # Notice "Name" "Sex" columns header is lower than the rest                        Age      Height (in)      Weight (lbs)              Name      Sex                                    Alex      M      41      74      170              Bert      M      42      68      166              Carl      M      32      70      155              Dave      M      39      72      167              Elly      F      30      66      124              Fran      F      33      66      115              Gwen      F      26      64      121              Hank      M      30      71      158              Ivan      M      53      72      175              Jake      M      32      69      143              Kate      F      47      69      139              Luke      M      34      72      163              Myra      F      23      62      98              Neil      M      36      75      160              Omar      M      38      70      145              Page      F      31      67      135              Quin      M      29      71      176              Ruth      F      28      65      131      df.set_index(keys = ['Sex', 'Name'], inplace=True)df# Note that key sequence matters; and same index values group# Note that inplace=True replaces the original df # This is useful to display sorted group                        Age      Height (in)      Weight (lbs)              Sex      Name                                    M      Alex      41      74      170              Bert      42      68      166              Carl      32      70      155              Dave      39      72      167              F      Elly      30      66      124              Fran      33      66      115              Gwen      26      64      121              M      Hank      30      71      158              Ivan      53      72      175              Jake      32      69      143              F      Kate      47      69      139              M      Luke      34      72      163              F      Myra      23      62      98              M      Neil      36      75      160              Omar      38      70      145              F      Page      31      67      135              M      Quin      29      71      176              F      Ruth      28      65      131      df.indexMultiIndex([('M', 'Alex'),            ('M', 'Bert'),            ('M', 'Carl'),            ('M', 'Dave'),            ('F', 'Elly'),            ('F', 'Fran'),            ('F', 'Gwen'),            ('M', 'Hank'),            ('M', 'Ivan'),            ('M', 'Jake'),            ('F', 'Kate'),            ('M', 'Luke'),            ('F', 'Myra'),            ('M', 'Neil'),            ('M', 'Omar'),            ('F', 'Page'),            ('M', 'Quin'),            ('F', 'Ruth')],           names=['Sex', 'Name'])df.index.namesFrozenList(['Sex', 'Name'])type(df.index)  # MultiIndexpandas.core.indexes.multi.MultiIndexdf.sort_index(inplace=True)df# sorting is based on "Sex", and then "Name"                        Age      Height (in)      Weight (lbs)              Sex      Name                                    F      Elly      30      66      124              Fran      33      66      115              Gwen      26      64      121              Kate      47      69      139              Myra      23      62      98              Page      31      67      135              Ruth      28      65      131              M      Alex      41      74      170              Bert      42      68      166              Carl      32      70      155              Dave      39      72      167              Hank      30      71      158              Ivan      53      72      175              Jake      32      69      143              Luke      34      72      163              Neil      36      75      160              Omar      38      70      145              Quin      29      71      176      Groupby CommandGroupby 是 SQL 的語法。根據某一項資料做分組方便查找。\The SQL GROUP BY StatementThe GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.df = pd.read_csv('drive/My Drive/Colab Notebooks/biostats.csv', index_col="Name", skipinitialspace=True)df  # show the dataframe with "Name" index column                  Sex      Age      Height (in)      Weight (lbs)              Name                                          Alex      M      41      74      170              Bert      M      42      68      166              Carl      M      32      70      155              Dave      M      39      72      167              Elly      F      30      66      124              Fran      F      33      66      115              Gwen      F      26      64      121              Hank      M      30      71      158              Ivan      M      53      72      175              Jake      M      32      69      143              Kate      F      47      69      139              Luke      M      34      72      163              Myra      F      23      62      98              Neil      M      36      75      160              Omar      M      38      70      145              Page      F      31      67      135              Quin      M      29      71      176              Ruth      F      28      65      131      grpBySex = df.groupby('Sex')  # output is a DataFrameGroupBy objecttype(grpBySex)pandas.core.groupby.generic.DataFrameGroupBygrpBySex.groups  # output is a dict, use get_group() obtains each sub-group{'F': Index(['Elly', 'Fran', 'Gwen', 'Kate', 'Myra', 'Page', 'Ruth'], dtype='object', name='Name'), 'M': Index(['Alex', 'Bert', 'Carl', 'Dave', 'Hank', 'Ivan', 'Jake', 'Luke', 'Neil',        'Omar', 'Quin'],       dtype='object', name='Name')}grpBySex.size()  # size() shows the counts of each groupSexF     7M    11dtype: int64grpBySex.get_group('M')  # get_group() output a DataFrame object                  Sex      Age      Height (in)      Weight (lbs)              Name                                          Alex      M      41      74      170              Bert      M      42      68      166              Carl      M      32      70      155              Dave      M      39      72      167              Hank      M      30      71      158              Ivan      M      53      72      175              Jake      M      32      69      143              Luke      M      34      72      163              Neil      M      36      75      160              Omar      M      38      70      145              Quin      M      29      71      176      Groupby Operation分組後可以進行各類運算：sum(), mean(), max(), min()grpBySex.sum()                  Age      Height (in)      Weight (lbs)              Sex                                    F      218      459      863              M      406      784      1778      grpBySex.mean()                  Age      Height (in)      Weight (lbs)              Sex                                    F      31.142857      65.571429      123.285714              M      36.909091      71.272727      161.636364      grpBySex.max()                  Age      Height (in)      Weight (lbs)              Sex                                    F      47      69      139              M      53      75      176      grpBySex.min()                  Age      Height (in)      Weight (lbs)              Sex                                    F      23      62      98              M      29      68      143      Wash Data with NAN判斷 NAN  isnull()  notnull()處理 NAN  dropna()  fillna()import numpy as npimport pandas as pdgroups = ["Modern Web", "DevOps", np.nan, "Big Data", "Security", "自我挑戰組"]ironmen = [59, 9, 19, 14, 6, np.nan]ironmen_dict = {                "groups": groups,                "ironmen": ironmen}# 建立 data frameironmen_df = pd.DataFrame(ironmen_dict)print(ironmen_df.loc[:, "groups"].isnull()) # 判斷哪些組的組名是遺失值print("---") # 分隔線print(ironmen_df.loc[:, "ironmen"].notnull()) # 判斷哪些組的鐵人數不是遺失值ironmen_df_na_dropped = ironmen_df.dropna() # 有遺失值的觀測值都刪除print(ironmen_df_na_dropped)print("---") # 分隔線ironmen_df_na_filled = ironmen_df.fillna(0) # 有遺失值的觀測值填補 0print(ironmen_df_na_filled)print("---") # 分隔線ironmen_df_na_filled = ironmen_df.fillna({"groups": "Cloud", "ironmen": 71}) # 依欄位填補遺失值print(ironmen_df_na_filled)0    False1    False2     True3    False4    False5    FalseName: groups, dtype: bool---0     True1     True2     True3     True4     True5    FalseName: ironmen, dtype: bool       groups  ironmen0  Modern Web     59.01      DevOps      9.03    Big Data     14.04    Security      6.0---       groups  ironmen0  Modern Web     59.01      DevOps      9.02           0     19.03    Big Data     14.04    Security      6.05       自我挑戰組      0.0---       groups  ironmen0  Modern Web     59.01      DevOps      9.02       Cloud     19.03    Big Data     14.04    Security      6.05       自我挑戰組     71.0PlotDataFrame 一個很重要的特性是利用 matplotlib.pyplot 繪圖功能 visuallize data!\有兩種方式：(1) 直接用 df.plot; (2) 用 pyplot 的 plot.\(1) 是一個 quick way to plot \(2) 可以調用 pyplot 所有的功能import matplotlib.pyplot as pltdf = pd.read_csv('drive/My Drive/Colab Notebooks/biostats.csv', index_col="Name", skipinitialspace=True)df.plot(title="Generated Plot", grid=True, figsize=(8,4))&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f952bc52240&gt;df.columnsplt.plot(df[['Age', 'Height (in)']])plt.xlabel('Name')plt.ylabel('Number')plt.title('Generated Plot')plt.grid()]]></content>
      <categories>
        
          <category> Language </category>
        
      </categories>
      <tags>
        
          <tag> python, </tag>
        
          <tag> pandas, </tag>
        
          <tag> DataFrame </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[RNN]]></title>
      <url>/foo/2018/12/22/rnn/</url>
      <content type="text"><![CDATA[import sysprint(sys.version)import tensorflowprint(tensorflow.__version__)import kerasprint(keras.__version__)import pandas as pdimport numpy as npimport mathimport randomimport matplotlib.pyplot as plt%matplotlib inline3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]The default version of TensorFlow in Colab will soon switch to TensorFlow 2.x.We recommend you upgrade now or ensure your notebook will continue to use TensorFlow 1.x via the %tensorflow_version 1.x magic:more info.1.15.02.2.5Using TensorFlow backend.Generate a sin wave with no noiseFirst, I create a function that generates sin wave with/without noise. Using this function, I will generate a sin wave with no noise. As this sin wave is completely deterministic, I should be able to create a model that can do prefect prediction the next value of sin wave given the previous values of sin waves!Here I generate period-10 sin wave, repeating itself 500 times, and plot the first few cycles.def noisy_sin(steps_per_cycle = 50,              number_of_cycles = 500,              random_factor = 0.4):    '''    number_of_cycles : The number of steps required for one cycle        Return :     pd.DataFrame() with column sin_t containing the generated sin wave     '''    random.seed(0)    df = pd.DataFrame(np.arange(steps_per_cycle * number_of_cycles + 1), columns=["t"])    df["sin_t"] = df.t.apply(lambda x: math.sin(x * (2 * math.pi / steps_per_cycle)+ random.uniform(-1.0, +1.0) * random_factor))    df["sin_t_clean"] = df.t.apply(lambda x: math.sin(x * (2 * math.pi / steps_per_cycle)))    print("create period-{} sin wave with {} cycles".format(steps_per_cycle,number_of_cycles))    print("In total, the sin wave time series length is {}".format(steps_per_cycle*number_of_cycles+1))    return(df)steps_per_cycle = 10df = noisy_sin(steps_per_cycle=steps_per_cycle,              random_factor = 0)n_plot = 8df[["sin_t"]].head(steps_per_cycle * n_plot).plot(      title="Generated first {} cycles".format(n_plot),      figsize=(15,3))create period-10 sin wave with 500 cyclesIn total, the sin wave time series length is 5001&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f4922f362e8&gt;Create a training and testing data. Here, the controversial “length of time series” parameter comes into play. For now, we set this parameter to 2.def _load_data(data, n_prev = 100):      """    data should be pd.DataFrame()    """    docX, docY = [], []    for i in range(len(data)-n_prev):        docX.append(data.iloc[i:i+n_prev].as_matrix())        docY.append(data.iloc[i+n_prev].as_matrix())    alsX = np.array(docX)    alsY = np.array(docY)    return alsX, alsYlength_of_sequences = 2test_size = 0.25ntr = int(len(df) * (1 - test_size))df_train = df[["sin_t"]].iloc[:ntr]df_test  = df[["sin_t"]].iloc[ntr:](X_train, y_train) = _load_data(df_train, n_prev = length_of_sequences)(X_test, y_test)   = _load_data(df_test, n_prev = length_of_sequences)  print(X_train.shape, y_train.shape, X_test.shape, y_test.shape)/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:8: FutureWarning: Method .as_matrix will be removed in a future version. Use .values instead.  /usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:9: FutureWarning: Method .as_matrix will be removed in a future version. Use .values instead.  if __name__ == '__main__':(3748, 2, 1) (3748, 1) (1249, 2, 1) (1249, 1)Simple RNN modelAs a deep learning model, I consider the simplest possible RNN model: RNN with a single hidden unit followed by fully connected layer with a single unit.  The RNN layer contains 3 weights: 1 weight for input, 1 weight for hidden unit, 1 weight for bias  The fully connected layer contains 2 weights: 1 weight for input (i.e., the output from the previous RNN layer), 1 weight for biasIn total, there are only 5 weights in this model.Let $x_t$ be the sin wave at time point $t$, then Formally, This simple model can be formulated in two lines as:Conventionally $h_0=0$. Notice that the length of time series is not involved in the definition of the RNN. The model should be able to “remember” the past history of $x_t$ through the hidden unit $h_t$.batch_shape needs for BPTT.¶  Every time when the model weights are updated, the BPTT uses only the randomly selected subset of the data.  This means that the each batch is treated as independent.  This batch_shape determines the size of this subset.  Every batch starts will the initial hidden unit $h_0=0$.  As we specify the length of the time series to be 2, our model only knows about the past 2 sin wave values to predict the next sin wave value.  The practical limitation of the finite length of the time series defeats the theoretical beauty of RNN: the RNN here is not a model remembeing infinite past sequence!!!Now, we define this model using Keras and show the model summary.from keras.layers import Inputfrom keras.models import Modelfrom keras.layers.core import Dense, Activation from keras.layers.recurrent import SimpleRNNdef define_model(length_of_sequences, batch_size = None, stateful = False):    in_out_neurons = 1    hidden_neurons = 1    inp = Input(batch_shape=(batch_size,                 length_of_sequences,                 in_out_neurons))      rnn = SimpleRNN(hidden_neurons,                     return_sequences=False,                    stateful = stateful,                    name="RNN")(inp)    dens = Dense(in_out_neurons,name="dense")(rnn)    model = Model(inputs=[inp],outputs=[dens])        model.compile(loss="mean_squared_error", optimizer="rmsprop")        return(model,(inp,rnn,dens))## use the default values for batch_size, statefulmodel, (inp,rnn,dens) = define_model(length_of_sequences = X_train.shape[1])model.summary()WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.Model: "model_1"_________________________________________________________________Layer (type)                 Output Shape              Param #   =================================================================input_1 (InputLayer)         (None, 2, 1)              0         _________________________________________________________________RNN (SimpleRNN)              (None, 1)                 3         _________________________________________________________________dense (Dense)                (None, 1)                 2         =================================================================Total params: 5Trainable params: 5Non-trainable params: 0_________________________________________________________________Now we train the model. The script was run without GPU.hist = model.fit(X_train, y_train, batch_size=600, epochs=1000,                  verbose=False,validation_split=0.05)WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1033: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1020: The name tf.assign is deprecated. Please use tf.compat.v1.assign instead.WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3005: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:190: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:197: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:207: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:216: The name tf.is_variable_initialized is deprecated. Please use tf.compat.v1.is_variable_initialized instead.WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:223: The name tf.variables_initializer is deprecated. Please use tf.compat.v1.variables_initializer instead.Plot of val_loss and loss.The validation loss and loss are exactly the same because our training data is a sin wave with no noise. Both validation and training data contain identical 10-period sin waves (with different number of cycles). The final validation loss is less than 0.001.for label in ["loss","val_loss"]:    plt.plot(hist.history[label],label=label)plt.ylabel("loss")plt.xlabel("epoch")plt.title("The final validation loss: {}".format(hist.history["val_loss"][-1]))plt.legend()plt.show()The plot of true and predicted sin waves look nearly identicaly_pred = model.predict(X_test)plt.figure(figsize=(19,3))plt.plot(y_test,label="true")plt.plot(y_pred,label="predicted")plt.legend()plt.show()What are the model weights?The best way to understand the RNN model is to create a model from scratch. Let’s extract the weights and try to reproduce the predicted values from the model by hands. The model weights can be readily obtained from the model.layers.ws = {}for layer in model.layers:    ws[layer.name] = layer.get_weights()ws{'RNN': [array([[-0.43695387]], dtype=float32),  array([[-0.64668506]], dtype=float32),  array([0.00117508], dtype=float32)], 'dense': [array([[-3.7658346]], dtype=float32),  array([-0.00123706], dtype=float32)], 'input_1': []}What are the predicted values of hidden units?Since we used Keras’s functional API to develop a model, we can easily see the output of each layer by compiling another model with outputs specified to be the layer of interest.In order to use the .predict() function, we need to compile the model, which requires specifying loss and optimizer. You can choose any values of loss and optimizer here, as we do not actually optimize this loss function. The newly created model “rnn_model” shares the weights obtained by the previous model’s optimization. Therefore for the purpose of visualizing the hidden unit values with the current model result, we do not need to do additional optimizations.rnn_model = Model(inputs=[inp],outputs=[rnn])rnn_model.compile(loss="mean_squared_error", optimizer="rmsprop")hidden_units = rnn_model.predict(X_test).flatten()Plot shows that the predicted hidden unit is capturing the wave shape. Scaling and shifting of the predicted hidden unit yield the predicted sin wave.upto = 100predicted_sin_wave = ws["dense"][0][0][0]*hidden_units + ws["dense"][1][0]plt.figure(figsize=(19,3))plt.plot(y_test[:upto],label="y_pred")plt.plot(hidden_units[:upto],label="hidden units")plt.plot(predicted_sin_wave[:upto],"*",         label="w2 * hidden units + b2")plt.legend()plt.show()Obtain predicted sin wave at the next time point given the current sin wave by handWe understand that how the predicted sin wave values can be obtained using the predicted hidden states from Keras. But how does the predicted hidden states generated from the original inputs i.e. the current sin wave? Here, stateful and stateless prediction comes into very important role. Following the definition of the RNN, we can write a script for RNNmodel as:def RNNmodel(ws,x,h=0):    '''    ws: predicted weights     x : scalar current sign value    h : scalar RNN hidden unit     '''               h = np.tanh(x*ws["RNN"][0][0][0] + h*ws["RNN"][1][0][0] + ws["RNN"][2][0])    x = h*ws["dense"][0][0][0] + ws["dense"][1][0]        return(x,h)Naturally, you can obtain the predicted sin waves $(x_1,x_2,…,x_t)$ by looping around RNNmodel as:$x^∗{t+1},h{t+1} = RNNmodel (x_t,h_t)$Here $x^∗_t$ indicates the estimated value of $x$ at time point $t$. As our model is not so complicated, we can readily implement this algorithm as:upto = 50 ## predict the first  sin valuesxstars, hs_hand = [], []for i, x in enumerate(df_test.values):    if i == 0:        h = 0 ## initial hidden layer value is zero        xstar = x        print("initial value of sin x_0 = {}, h_0 = {}".format(x,h))    hs_hand.append(h)    xstars.append(xstar[0])    xstar, h = RNNmodel(ws,x, h)assert len(df_test.values) == len(xstars)initial value of sin x_0 = [-1.27375647e-13], h_0 = 0In this formulation, x_stars[t] contains the prediction of sin wave at time point t just as df_testplt.figure(figsize=(18,3))plt.plot(df_test.values[:upto],label="true",alpha=0.3,linewidth=5)plt.plot(xstars[:upto],label="sin prediction (xstar)")plt.plot(hs_hand[:upto],label="hidden state (xstar)")plt.legend()&lt;matplotlib.legend.Legend at 0x7f490d2fe908&gt;You can see that the model prediction is not good in the first few time points and then stabilized. OK. My model seems to over estimates the values when sin wave is going down and underestimates when the sin wave is going up. However, there is one question: this model returns almost zero validation loss. The error seems a bit high. In fact the error from the prediction above is quite large. What is going on?"validation loss {:3.2f}".format(np.mean((np.array(xstars) - df_test["sin_t"].values)**2))'validation loss 0.08'Let’s predict the sin wave using the existing predict function from Keras. Remind you that we prepare X_test when X_train was defined. X_test contains data as:x1,x2x2,x3x3,x4…y_test_from_keras = model.predict(X_test).flatten()Notice that this predicted values are exactly the same as the ones calculated before.np.all(predicted_sin_wave == y_test_from_keras)TrueAs the prediction starts from x_3, add the 2 NaN into a predicted vector as placeholders. This is just to make sure that the length of y_test_from_keras is compatible with xtars.y_test_from_keras = [np.NaN, np.NaN] + list(y_test_from_keras.flatten())h_test_from_keras = [np.NaN, np.NaN] + list(hidden_units.flatten())The plot shows that Keras’s predicted values are almost perfect and the validation loss is nearly zero. Clearly xstars are different from the Keras’s prediction. It seems that the predicted states from Keras and from by hand are also slightly different. Then question is, how does Keras predict the output?plt.figure(figsize=(18,3))plt.plot(df_test.values[:upto],label="true",alpha=0.3,linewidth=5)plt.plot(xstars[:upto],label="sin prediction (xstar)")plt.plot(hs_hand[:upto],label="hidden state (xstar)")plt.plot(y_test_from_keras[:upto],label="sin prediction (keras)")plt.plot(h_test_from_keras[:upto],label="hidden state (keras)")plt.legend()print("validation loss {:6.5f}".format(np.nanmean((np.array(y_test_from_keras) - df_test["sin_t"].values)**2)))validation loss 0.00021Here, the technical details of the BPTT algorithm comes in, and the time series length parameter (i.e., batch_size[1]) takes very important role.As the BPTT algorithm only passed back 2 steps, the model assumes that:the hidden units are initialized to zero every 2 steps.the prediction of the next sin value (xt+1) is based on the hidden unit (ht) which is created by updating the hidden units twice in the past assuming that ht−1=0.x∗t,ht=RNNmodel(xt−1,0)xt+1,−=RNNmodel(xt,ht)Note that the intermediate predicted sin x∗t based on ht−1=0 should not be used as the predicted sin value. This is because the x∗t was not directly used to evaluate the loss function.Finally, obtain the Keras’s predicted sin wave at the next time point given the current sin wave by hand.def myRNNpredict(ws,X):    X = X.flatten()    h = 0    for i in range(len(X)):        x,h = RNNmodel(ws,X[i],h)    return(x,h)xs, hs = [], []for i in range(X_test.shape[0]):    x, h = myRNNpredict(ws,X_test[i,:,:])    xs.append(x)    hs.append(h)print("All sin estimates agree with ones from Keras = {}".format(    np.all(np.abs( np.array(xs) - np.array(y_test_from_keras[2:]) ) &lt; 1E-5)))print("All hidden state estmiates agree with ones fome Keras = {}".format(    np.all(np.abs( np.array(hs) - np.array(h_test_from_keras[2:]) ) &lt; 1E-5)) )All sin estimates agree with ones from Keras = TrueAll hidden state estmiates agree with ones fome Keras = TrueNow we understand how Keras is predicting the sin wave.In fact, Keras has a way to return xstar as predicted values, using “stateful” flag. This stateful is a notorious parameter and many people seem to be very confused. But by now you can understand what this stateful flag is doing, at least during the prediction phase. When stateful = True, you can decide when to reset the states to 0 by yourself.In order to predict in “stateful” mode, we need to re-define the model with stateful = True. When stateful is True, we need to specify the exact integer for batch_size. As we only have a single sin time series, we will set the batch_size to 1.model_stateful,_ = define_model(length_of_sequences = 1,                               batch_size=1,                               stateful = True)model_stateful.summary()Model: "model_3"_________________________________________________________________Layer (type)                 Output Shape              Param #   =================================================================input_2 (InputLayer)         (1, 1, 1)                 0         _________________________________________________________________RNN (SimpleRNN)              (1, 1)                    3         _________________________________________________________________dense (Dense)                (1, 1)                    2         =================================================================Total params: 5Trainable params: 5Non-trainable params: 0_________________________________________________________________Assign the trained weights into the stateful model.for layer in model.layers:            for layer_predict in model_stateful.layers:        if (layer_predict.name == layer.name):            layer_predict.set_weights(layer.get_weights())            breakNow we predict in stateful mode. Here it is very important to reset_state() before the prediction so that h0=0.pred = df_test.values[0][0]stateful_sin = []model_stateful.reset_states()for i in range(df_test.shape[0]):    stateful_sin.append(pred)    pred = model_stateful.predict(df_test.values[i].reshape(1,1,1))[0][0]    stateful_sin = np.array(stateful_sin)print("All predicted sin values with stateful model agree to xstars = {}".format(    np.all(np.abs(np.array(stateful_sin) - np.array(xstars))&lt; 1E-5)))All predicted sin values with stateful model agree to xstars = TrueNow we understand that xstars is the prediction result when stateful = True. We also understand that the prediction results are way better when stateful = False at least for this sin wave example.However, the prediction with stateful = False brings to some awkwardness: what if our batch have a very long time series of length, say K? Do we always have to go back all the K time steps, set ht−K=0 and then feed forward K steps in order to predict at the time point t? This may be computationally intense.]]></content>
      <categories>
        
          <category> Foo </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Poincare Conjecture/Theorem and Ricci Flow]]></title>
      <url>/foo/2018/12/22/test/</url>
      <content type="text"><![CDATA[Introduction之前學 group theory 和 tensor calculus, 總結到平直空間的量子場論。最簡單的是 QED 的 Lagrangian 如下為純量，具有 U(1) 對稱性，對應各種守恆律。以及不同路徑對時間積分滿足最小作用原理。可以由 QED Lagrangian 推導非量子場論近似解 Maxwell equations. Maxwell equations 可以解釋所有的電磁現象，但無法解釋光量子效應例如光電效應，黑體輻射，雷射等等。就像可以從愛因斯坦場方程式推導近似解牛頓萬有引力定律。把 tensor calculus 從 Euclidean (differential) geometry 推廣到 Riemannian (differential) geometry, 可以連結到廣義相對論。以下是愛因斯坦場方程式：右手 $T_{\mu\nu}$ 是 energy-momentum tensor, 二階張量，代表 mass-energy distribution. 左手 $G_{\mu\nu}$ 是 Einstein tensor, 也是二階張量，代表 space-time curvature, 基本是 $R_{\mu\nu}$ (Ricci curvature tensor) 減去一個修正項。多出的修正項 $ 1/2 R g_{\mu\nu}$ 項：$R$ 是 scalar curvature (trace of Ricci curvature tensor), $g_{\mu\nu}$ is metric tensor.  當初愛因斯坦寫下的場方程式並沒有這一項: (1)違反 local conservation of energy-momentum. 也就是 energy flow is not preserved [@wikiHistoryGeneral2019];（2）無法得到座標系無關形式，違反(馬赫)廣義相對性原理。愛因斯坦求助於 Hilbert.  在 Hilbert 的協助下，找到這個修正項。如果 $T_{\mu\nu}$ 隨時間變化，例如兩個黑洞旋轉合併，會改變時空曲率。時空曲率又會反過來影響質能分佈 and vice versa, 因而產生時空漣漪，一般稱為引力波。如同 Maxwell equation 的電場變化產生磁場 and vice versa, 因而產生電磁波。Tensor Calculus 和 Differential Geometry 能夠用於 Quantum Field Theory and General Relativity 兩大物理學，已經是非常幸福。 更幸福的是可以用於 Topology 的 Poincare conjecture (now theorem proved by Perelman).  這部分我們 follow Hamilton’s direction using Ricci flow. [@hamiltonRichardHamilton]Laplacian Operator and Heat Equation這部分可以參考前文【】。我們從座標無關的張量定義拉普拉斯算子：$\Delta = \nabla\cdot\nabla$, 或是 diverge of gradient of a scalar or vector field. 以上的定義不只用於歐氏幾何，也適用黎曼幾何。熱傳導 (heat diffusion) 上式是 manifold 固定，只是定義在 manifold 上的純量場 (e.g. 勢能場，溫度場) 隨時間和空間變化，但是整體 volume 不變（守恆量），對應一個 flow。Ricci Flow = 愛因斯坦場方程式 + 拉普拉斯熱傳導Hamilton 則是考慮 manifold 本身隨時間變化。1981 引入 Ricci flow. 觀念上非常類似上述的熱傳導。但直接用於 manifold (intrinsic) 而非其上的 (extrinsic) field.  非常開創性而且具物理性直觀性！看了 Hamilton 2006 Youtube 的演講 [@hamiltonRichardHamilton2006], 他也許不是第一個把 PDE (Partial Differential Equation) 用於 topology. 但是第一個引入 Ricci flow, 結合分析和拓墣，對於 topology 非常具體實用 (N-manifold, not only 2 or 3).  拓墣可以大量借用 PDE 的理論，甚至可以用計算機協助。就像笛卡爾引入直角座標系結合代數和幾何。Hamilton 高度評價 Perelman 在 Ricci flow 的貢獻，不像某一些文章暗示 Hamilton 對 Perelman 有心結。Perelman 在拒絕 Fields medal 也高度評價 Hamilton 在 Ricci flow 的創見。兩人在專業領域應該是互相佩服。Hamilton 提出的 Ricci Flow 如下。果然是數學家的公式，非常簡潔。其實就是張量版的熱傳導方程式！$R_{ij}$ 代表 manifold 的 intrinsic curvature, 基本是 Christoffel symbol 的空間一階導數 [@ListFormulas2019]。and Christoffel symbol 是 metric tensor 的空間一階導數因此 $R_{ij}$ 基本是 metric tensor $g_{ij}$ 的空間二階導數。這和拉普拉斯算子的功能一致。等式的右手則是 metric tensor 對時間一階導數。因此 Ricci flow equation 類似拉普拉斯熱傳導公式。隨時間改變 manifold 的 metric tensor, Christoffel tesnor, curvature tensor.熟悉愛因斯坦場方程式者會想到修正項。Yes! 這稱為 normalized Ricci flow.Normalized Ricci flow 的定義如下 [@wikiRicciFlow2019]：where $R_{avg}$ is the average (mean) of the scalar curvature (which is the trace of Ricci tensor), n is the dimension of the manifold.The normalized equation preserves the volume of the metric space.  這一句話就是加上中間這一項才能保持 volume 不變。這是 “(incompressible) flow” 的基本條件。這修正項和愛因斯坦廣義場方程式基本一致 (n=4)，滿足場方程式座標系無關，也就是廣義相對性原理。基本原則是 metric tensor, Christoffel tensor, curvature tensor exponentially decay.  Ricci flow 的負號會讓不穩定的負曲率 (3-manifold 雙曲面) 只會短暫出現。  大的正曲率（非常彎 3-manifold 橢圓曲面）也會很快 decay。  最後由小的正曲率（平緩 3-manifold 橢圓曲面）dominate manifold 的變化。  Ricci flow 變化 manifold 過程中，拓墣特性不變 (invariant)，就是同胚！可以用於證明 Poincare theorem.  Volume (area for 2-manifold) is preserved? Yes for normalized Ricci flow; No for Ricci flow.  A good way to think of the normalized Ricci flow is that it’s the same as Ricci flow but you rescale every time-slice to make the volume constant. Maybe also reparametrize time to make the equation nicer if you feel like it. Of course, isometries are still isometries after a metric gets rescaled.  下圖是一個 2D surface/manifold 的 Ricci flow 變化 surface/manifold 的過程。因為是 Ricci flow, surface area is not preserved.Poincare Conjecture/Theorem回到 Poincare conjecture [@PoincareConjecture2019]. 先從最基本的 2D surface 開始，比較直觀。A compact 2-dimensional surface (2D manifold) without boundary is topologically homeomorphic to a 2-sphere if every loop can be continuously tightened to a point.更簡潔的說法Every simply connected, closed (i.e. no boundary and compact) 2-manifold is homeomorphic to the 2-sphere.基本上如果一個 2D surface 任何一個 loop 可以連續收斂到一個點，2D surface 必定和球面同胚，如上圖。再看 2D torus (環面) 如下圖。沒有 boundary, 存在兩種 loops (red and pink) 都無法收斂到一個點。因此 2D torus 和球面不同胚。任何一個 loop 可以連續收斂到一個點 = 沒有破洞 = 單連通翻譯成中文：任一單連通的、封閉的二維流形與二維球面同胚。The Poincaré conjecture asserts that the same is true for 3-dimensional as follows!Every simply connected, closed (i.e. no boundary and compact) 3-manifold is homeomorphic to the 3-sphere.翻譯成中文：任一單連通、封閉的三維流形與三維球面同胚。###如何想像單連通、封閉的三維流形？對於處於三維歐氏空間的我們，可以看到封閉的二維流形（如各種球面，環面，Klein bottle, etc.）我們可以想像有邊界的三維流形，但是很難想像封閉的三維流形。這需要四維空間的視角才能想像。但對於簡單封閉三維流形，我們可以展開降維到三維歐氏空間。以下用 2D 骰子面（和 2D 球面同胚）來類比。參考數學女孩龐加萊猜想。2D 骰子面是單連通、封閉的二維曲面，和二維球面同胚。為什麼用 2D 骰子面？因為 3D cube (embed 2D 骰子面)可以展開成 6 個 2D 正方形在 2D 歐氏平面。每一個正方形的 4 邊，都和 4 個正方形相鄰。因此一個 2D 曲面的生物 (毛毛蟲)，只要遵循相鄰的規則，可以一直移動不會離開 2D 骰子面。也就是具有封閉性。把 2D 骰子面推廣到 3D 骰子體（和 3D 超球面同胚）。原則上要在 4D 歐氏空間才能想像。可以用下圖左近似 4D hypercube。可以展開成 8 個 3D 立方體 (cube), 每一個 3D cube 的 6 面，都和 6 個（上下左右前後）3D cube 相鄰。因此一個 3D 生物（人），只要遵循相鄰的規則，可以一直移動不會離開 3D 骰子體。也就是具有封閉性。Why Poincare Conjecture is Important？首先聽起來很基本且重要。的確這是拓墣學一個基本問題。事實上，在 2 維和大於等於 4 維流形，本命題都已證明維真。只有在 3 維流形，也就是 Poincare conjecture, 一直到 Perelman 在 2006 才證明 Poincare conjecture.更重要的是 1982 Thurston 提出 geometrization conjecture (now theorem) 猜測所有封閉的三維流形 (3-manifold) 可以分解為 8 種基本幾何結構，3-sphere 是其中之一。[@wikiGeometrizationConjecture2019]類似有 uniformization theorem 適用於二維流形 (2-manifold): 所有單連通的二維流形（球面）一定是 3 種曲面之一（Euclidean, spherical, or hyperbolic).Strategy to Prove Poincare ConjectureHamilton 1981 提出 Ricci flow 的思路：  對於單連通、封閉 3-manifold 作為初始條件, $g_{ij}(0)$, 施加 Ricci flow deforms 3-manifold.  Ricci flow 變化 manifold 過程中，manifold 拓墣特性不變 (invariant)，就是同胚！  Ricci flow 的負號會讓不穩定的負曲率只會短暫出現。大的正曲率也會很快 decay.  最後由小的正曲率 dominate manifold 的變化。最後趨近 3-sphere.  因此證明單連通、封閉 3-manifold 和 3-sphere 同胚，也就是 Poincare conjecture.Hamilton 在 Ricci flow 的貢獻：[@hamiltonRichardHamilton2006]  正曲率的 2/3-manifold 在 finite time 收斂到一點 (singularity with curvature $\to\infty$)。但 normalize (area/volume) 之後收斂到 2/3-sphere，就是 2/3-sphere 同胚。等效於使用 normalized Ricci flow to preserve volume (?).  2-manifold 啞鈴 (1 “neck” with positive and negative curvature) 或是多個 “neck” 如圖一在 finite time 收斂到一點。  因此 2-manifold 可以很容易用 Ricci flow 證明和 2-sphere 同胚。這是簡單的牛刀小試。  3-manifold with neck 就跟複雜，會產生 “neck pinch” singularity.  Hamilton 提出 Ricci flow with surgery to cut off large curvature portion and solve the singularity to converge to 3-sphere.  Hamilton 的父親是真的外科醫生。  但存在 cigar (2-manifold) or other 3-manifold soliton 過程永遠保持形狀不變，無法收斂到 3-sphere.Perelman 解決 Hamilton Ricci-flow 的漏洞。  Improve the surgery to completely solve singularity.  From transport equation to make soliton 無法產生。  Prove geometrization conjecture, Poincare conjecture 基本是一個子定理。ReferenceHamilton, Richard, dir. 2006. Richard Hamilton | the PoincareConjecture | 2006. https://www.youtube.com/watch?v=fymCXcIt20g.Wiki. 2019a. “Ricci Flow.” Wikipedia.https://en.wikipedia.org/w/index.php?title=Ricci_flow&amp;oldid=920777616.———. 2019b. “History of General Relativity.” Wikipedia.https://en.wikipedia.org/w/index.php?title=History_of_general_relativity&amp;oldid=931327622.———. 2019c. “Geometrization Conjecture.” Wikipedia.https://en.wikipedia.org/w/index.php?title=Geometrization_conjecture&amp;oldid=932572904.]]></content>
      <categories>
        
          <category> Foo </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Next Theme Tutorial]]></title>
      <url>/tutorial/2017/07/20/next-tutorial/</url>
      <content type="text"><![CDATA[  NexT is a high quality elegant Jekyll theme ported from Hexo Next. It is crafted from scratch, with love.Live PreviewScreenshots      Desktop        Sidebar    Sidebar (Post details page)  MobileInstallationCheck whether you have Ruby 2.1.0 or higher installed:ruby --versionInstall Bundler:gem install bundlerClone Jacman theme:git clone https://github.com/Simpleyyt/jekyll-theme-next.gitcd jekyll-theme-nextInstall Jekyll and other dependencies from the GitHub Pages gem:bundle installRun your Jekyll site locally:bundle exec jekyll serverMore Details：Setting up your GitHub Pages site locally with JekyllFeaturesMultiple languages support, including: English / Russian / French / German / Simplified Chinese / Traditional Chinese.Default language is English.language: en# language: zh-Hans# language: fr-FR# language: zh-hk# language: zh-tw# language: ru# language: deSet language field as following in site _config.yml to change to Chinese.language: zh-HansComment support.NexT has native support for DuoShuo and Disqus comment systems.Add the following snippets to your _config.yml:duoshuo:  enable: true  shortname: your-duoshuo-shortnameORdisqus_shortname: your-disqus-shortnameSocial MediaNexT can automatically add links to your Social Media accounts:social:  GitHub: your-github-url  Twitter: your-twitter-url  Weibo: your-weibo-url  DouBan: your-douban-url  ZhiHu: your-zhihu-urlFeed link.  Show a feed link.Set rss field in theme’s _config.yml, as the following value:  rss: false will totally disable feed link.      rss:   use sites’ feed link. This is the default option.    Follow the installation instruction in the plugin’s README. After the configuration is done for this plugin, the feed link is ready too.    rss: http://your-feed-url set specific feed link.Up to 5 code highlight themes built-in.NexT uses Tomorrow Theme with 5 themes for you to choose from.Next use normal by default. Have a preview about normal and night:Head over to Tomorrow Theme for more details.ConfigurationNexT comes with few configurations.# Menu configuration.menu:  home: /  archives: /archives# Faviconfavicon: /favicon.ico# Avatar (put the image into next/source/images/)# can be any image format supported by web browsers (JPEG,PNG,GIF,SVG,..)avatar: /default_avatar.png# Code highlight theme# available: normal | night | night eighties | night blue | night brighthighlight_theme: normal# Fancybox for image galleryfancybox: true# Specify the date when the site was setupsince: 2013Browser support]]></content>
      <categories>
        
          <category> tutorial </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Highlight Test]]></title>
      <url>/test/2017/07/19/highlight-test/</url>
      <content type="text"><![CDATA[This is a highlight test.Normal blockalert('Hello World!');print 'helloworld'Highlight blockalert( 'Hello, world!' );print 'helloworld'def foo  puts 'foo'enddef foo  puts 'foo'end123def foo  puts 'foo'end#include &lt;iostream&gt;using namespace std;void foo(int arg1, int arg2){}int main(){  string str;  foo(1, 2);  cout &lt;&lt; "Hello World" &lt;&lt; endl;  return 0;}]]></content>
      <categories>
        
          <category> Test </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Emoji Test]]></title>
      <url>/2015/09/19/emoji-test/</url>
      <content type="text"><![CDATA[This is an emoji test. :smile: lol.See emoji cheat sheet for more detail :wink: : https://www.webpagefx.com/tools/emoji-cheat-sheet/.:bowtie::smile::laughing::blush::smiley::relaxed::smirk::heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:]]></content>
      <categories>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Gallery Post]]></title>
      <url>/photo/2014/11/18/gallery-post/</url>
      <content type="text"><![CDATA[Nunc dignissim volutpat enim, non sollicitudin purus dignissim id. Nam sit amet urna eu velit lacinia eleifend. Proin auctor rhoncus ligula nec aliquet. Donec sodales molestie lacinia. Curabitur dictum faucibus urna at convallis. Aliquam in lectus at urna rutrum porta. In lacus arcu, molestie ut vestibulum ut, rhoncus sed eros. Sed et elit vitae risus pretium consectetur vel in mi. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi tempus turpis quis lectus rhoncus adipiscing. Proin pulvinar placerat suscipit. Maecenas imperdiet, quam vitae varius auctor, enim mauris vulputate sapien, nec laoreet neque diam non quam.Etiam luctus mauris at mi sollicitudin quis malesuada nibh porttitor. Vestibulum non dapibus magna. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Proin feugiat hendrerit viverra. Phasellus sit amet nunc mauris, eu ultricies tellus. Sed a mi tortor, eleifend varius erat. Proin consectetur molestie tortor eu gravida. Cras placerat orci id arcu tristique ut rutrum justo pulvinar. Maecenas lacinia fringilla diam non bibendum. Aenean vel viverra turpis. Integer ut leo nisi. Pellentesque vehicula quam ut sapien convallis consequat. Aliquam ut arcu purus, eget tempor purus. Integer eu tellus quis erat tristique gravida eu vel lorem.]]></content>
      <categories>
        
          <category> Photo </category>
        
      </categories>
      <tags>
        
          <tag> consectetur </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[MathJax with Jekyll]]></title>
      <url>/opinion/2014/02/16/Mathjax-with-jekyll/</url>
      <content type="text"><![CDATA[One of the rewards of switching my website to Jekyll is theability to support MathJax, which means I can write LaTeX-like equations that getnicely displayed in a web browser, like this one \( \sqrt{\frac{n!}{k!(n-k)!}} \) orthis one \( x^2 + y^2 = r^2 \).What’s MathJax?If you check MathJax website (www.mathjax.org) you’ll seethat it is an open source JavaScript display engine for mathematics that works in allbrowsers.How to implement MathJax with JekyllI followed the instructions described by Dason Kurkiewicz forusing Jekyll and Mathjax.Here are some important details. I had to modify the Ruby library for Markdown inmy _config.yml file. Now I’m using redcarpet so the corresponding line in theconfiguration file is: markdown: redcarpetTo load the MathJax javascript, I added the following lines in my layout post.html(located in my folder _layouts)&lt;script type="text/javascript"    src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;&lt;/script&gt;Of course you can choose a different file location in your jekyll layouts.Note that by default, the tex2jax preprocessor defines theLaTeX math delimiters, which are \\(...\\) for in-line math, and \\[...\\] fordisplayed equations. It also defines the TeX delimiters $$...$$ for displayedequations, but it does not define $...$ as in-line math delimiters. To enable in-line math delimiter with $...$, please use the following configuration:&lt;script type="text/x-mathjax-config"&gt;MathJax.Hub.Config({  tex2jax: {    inlineMath: [['$','$'], ['\\(','\\)']],    processEscapes: true  }});&lt;/script&gt;&lt;script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"&gt;&lt;/script&gt;A Couple of ExamplesHere’s a short list of examples. To know more about the details behind MathJax, you canalways checked the provided documentation available athttp://docs.mathjax.org/en/latest/Let’s try a first example. Here’s a dummy equation:How do you write such expression? Very simple: using double dollar signs$$a^2 + b^2 = c^2$$To display inline math use \\( ... \\) like this \\( sin(x^2) \\) which getsrendered as \( sin(x^2) \)Here’s another example using type \mathsf$$ \mathsf{Data = PCs} \times \mathsf{Loadings} $$which gets displayed asOr even better:\\[ \mathbf{X} = \mathbf{Z} \mathbf{P^\mathsf{T}} \\]is displayed as\[ \mathbf{X} = \mathbf{Z} \mathbf{P^\mathsf{T}} \]If you want to use subscripts like this \( \mathbf{X}_{n,p} \) you need to scape theunderscores with a backslash like so \mathbf{X}\_{n,p}:$$ \mathbf{X}\_{n,p} = \mathbf{A}\_{n,k} \mathbf{B}\_{k,p} $$will be displayed as\[ \mathbf{X}_{n,p} = \mathbf{A}_{n,k} \mathbf{B}_{k,p} \]]]></content>
      <categories>
        
          <category> opinion </category>
        
      </categories>
      <tags>
        
          <tag> resources </tag>
        
          <tag> jekyll </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Images]]></title>
      <url>/2013/12/27/images/</url>
      <content type="text"><![CDATA[This is a image test post.]]></content>
      <categories>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Excerpts]]></title>
      <url>/2013/12/25/excerpts/</url>
      <content type="text"><![CDATA[The following contents should be invisible in home/archive page.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce eget urna vitae velit eleifend interdum at ac nisi. In nec ligula lacus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Sed eu cursus erat, ut dapibus quam. Aliquam eleifend dolor vitae libero pharetra adipiscing. Etiam adipiscing dolor a quam tempor, eu convallis nulla varius. Aliquam sollicitudin risus a porta aliquam. Ut nec velit dolor. Proin eget leo lobortis, aliquam est sed, mollis mauris. Fusce vitae leo pretium massa accumsan condimentum. Fusce malesuada gravida lectus vel vulputate. Donec bibendum porta nibh ut aliquam.Sed lorem felis, congue non fringilla eu, aliquam eu eros. Curabitur orci libero, mollis sed semper vitae, adipiscing in lectus. Aenean non egestas odio. Donec sollicitudin nisi quis lorem gravida, in pharetra mauris fringilla. Duis sit amet faucibus dolor, id aliquam neque. In egestas, odio gravida tempor dictum, mauris felis faucibus purus, sit amet commodo lacus diam vitae est. Ut ut quam eget massa semper sodales. Aenean non ipsum cursus, blandit lectus in, ornare odio. Curabitur ultrices porttitor vulputate.]]></content>
      <categories>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Block]]></title>
      <url>/foo/2013/12/25/block/</url>
      <content type="text"><![CDATA[This post is used for testing tag plugins. See docs for more info.Block QuoteNormal blockquote  Praesent diam elit, interdum ut pulvinar placerat, imperdiet at magna.Code BlockInline code blockThis is a inline code block: python, print 'helloworld'.Normal code blockalert('Hello World!');print "Hello world"Highlight code blockprint "Hello world"def foo  puts 'foo'end123def foo  puts 'foo'endGist]]></content>
      <categories>
        
          <category> Foo </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[日本語テスト]]></title>
      <url>/2013/12/25/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%86%E3%82%B9%E3%83%88/</url>
      <content type="text"><![CDATA[This is a Japanese test post.私は昨日ついにその助力家というのの上よりするたなけれ。最も今をお話団はちょうどこの前後なかろでくらいに困りがいるたをは帰着考えたなかって、そうにもするでうたらない。がたを知っないはずも同時に九月をいよいよたありた。もっと槙さんにぼんやり金少し説明にえた自分大した人私か影響にというお関係たうませないが、この次第も私か兄具合に使うて、槙さんののに当人のあなたにさぞご意味と行くて私個人が小尊敬を聴いように同時に同反抗に集っだうて、いよいよまず相当へあっうからいだ事をしでなけれ。  それでそれでもご時日をしはずはたったいやと突き抜けるますて、その元がは行ったてという獄を尽すていけですた。この中道具の日その学校はあなたごろがすまなりかとネルソンさんの考えるですん、辺の事実ないというご盲従ありたですと、爺さんのためが薬缶が結果までの箸の当時してならて、多少の十月にためからそういう上からとにかくしましないと触れべきものたで、ないうですと多少お人達したのでたた。From すぐ使えるダミーテキスト - 日本語 Lorem ipsum]]></content>
      <categories>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[中文測試]]></title>
      <url>/test/test/2013/12/25/%E4%B8%AD%E6%96%87%E6%B8%AC%E8%A9%A6/</url>
      <content type="text"><![CDATA[This is a Chinese test post.善我王上魚、產生資西員合兒臉趣論。畫衣生這著爸毛親可時，安程幾？合學作。觀經而作建。都非子作這！法如言子你關！手師也。以也座論頭室業放。要車時地變此親不老高小是統習直麼調未，行年香一？就竟在，是我童示讓利分和異種百路關母信過明驗有個歷洋中前合著區亮風值新底車有正結，進快保的行戰從：弟除文辦條國備當來際年每小腳識世可的的外的廣下歌洲保輪市果底天影；全氣具些回童但倒影發狀在示，數上學大法很，如要我……月品大供這起服滿老？應學傳者國：山式排只不之然清同關；細車是！停屋常間又，資畫領生，相們制在？公別的人寫教資夠。資再我我！只臉夫藝量不路政吃息緊回力之；兒足灣電空時局我怎初安。意今一子區首者微陸現際安除發連由子由而走學體區園我車當會，經時取頭，嚴了新科同？很夫營動通打，出和導一樂，查旅他。坐是收外子發物北看蘭戰坐車身做可來。道就學務。國新故。  工步他始能詩的，裝進分星海演意學值例道……於財型目古香亮自和這乎？化經溫詩。只賽嚴大一主價世哥受的沒有中年即病行金拉麼河。主小路了種就小為廣不？From 亂數假文產生器 - Chinese Lorem Ipsum]]></content>
      <categories>
        
          <category> test/test </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam justo turpis, tincidunt ac convallis id.]]></title>
      <url>/foo/2013/12/25/long-title/</url>
      <content type="text"><![CDATA[This post has a long title. Make sure the title displayed right.]]></content>
      <categories>
        
          <category> Foo </category>
        
      </categories>
      <tags>
        
          <tag> Foo </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Categories]]></title>
      <url>/foo/bar/baz/2013/12/25/categories/</url>
      <content type="text"><![CDATA[This post contains 3 categories. Make sure your theme can display all of the categories.]]></content>
      <categories>
        
          <category> Foo </category>
        
          <category> Bar </category>
        
          <category> Baz </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Link Post]]></title>
      <url>/foo/2013/12/25/link-post/</url>
      <content type="text"><![CDATA[This is a link post. Clicking on the link should open Google in a new tab or window.]]></content>
      <categories>
        
          <category> Foo </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Tags]]></title>
      <url>/foo/2013/12/25/tags/</url>
      <content type="text"><![CDATA[This post contains 3 tags. Make sure your theme can display all of the tags.]]></content>
      <categories>
        
          <category> Foo </category>
        
      </categories>
      <tags>
        
          <tag> Foo </tag>
        
          <tag> Bar </tag>
        
          <tag> Baz </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Elements]]></title>
      <url>/foo/2013/12/25/elements/</url>
      <content type="text"><![CDATA[The purpose of this post is to help you make sure all of HTML elements can display properly. If you use CSS reset, don’t forget to redefine the style by yourself.Heading 1Heading 2Heading 3Heading 4Heading 5Heading 6ParagraphLorem ipsum dolor sit amet, test link consectetur adipiscing elit. Strong text pellentesque ligula commodo viverra vehicula. Italic text at ullamcorper enim. Morbi a euismod nibh. Underline text non elit nisl. Deleted text tristique, sem id condimentum tempus, metus lectus venenatis mauris, sit amet semper lorem felis a eros. Fusce egestas nibh at sagittis auctor. Sed ultricies ac arcu quis molestie. Donec dapibus nunc in nibh egestas, vitae volutpat sem iaculis. Curabitur sem tellus, elementum nec quam id, fermentum laoreet mi. Ut mollis ullamcorper turpis, vitae facilisis velit ultricies sit amet. Etiam laoreet dui odio, id tempus justo tincidunt id. Phasellus scelerisque nunc sed nunc ultricies accumsan.Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed erat diam, blandit eget felis aliquam, rhoncus varius urna. Donec tellus sapien, sodales eget ante vitae, feugiat ullamcorper urna. Praesent auctor dui vitae dapibus eleifend. Proin viverra mollis neque, ut ullamcorper elit posuere eget.  Praesent diam elit, interdum ut pulvinar placerat, imperdiet at magna.Maecenas ornare arcu at mi suscipit, non molestie tortor ultrices. Aenean convallis, diam et congue ultricies, erat magna tincidunt orci, pulvinar posuere mi sapien ac magna. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Praesent vitae placerat mauris. Nullam laoreet ante posuere tortor blandit auctor. Sed id ligula volutpat leo consequat placerat. Mauris fermentum dolor sed augue malesuada sollicitudin. Vivamus ultrices nunc felis, quis viverra orci eleifend ut. Donec et quam id urna cursus posuere. Donec elementum scelerisque laoreet.List TypesDefinition List (dl)Definition List TitleThis is a definition list division.Ordered List (ol)  List Item 1  List Item 2  List Item 3Unordered List (ul)  List Item 1  List Item 2  List Item 3Table            Table Header 1      Table Header 2      Table Header 3                  Division 1      Division 2      Division 3              Division 1      Division 2      Division 3              Division 1      Division 2      Division 3      Misc Stuff - abbr, acronym, sub, sup, etc.Lorem superscript dolor subscript amet, consectetuer adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. cite. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus. Maecenas ornare tortor. Donec sed tellus eget sapien fringilla nonummy. NBA Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus.  AVE]]></content>
      <categories>
        
          <category> Foo </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
